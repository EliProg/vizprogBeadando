//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 05. 01. 20:48:52
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Models;

namespace cnTimetable
{

    public partial class TimetableContext : DbContext
    {

        public TimetableContext() :
            base()
        {
            OnCreated();
        }

        public TimetableContext(DbContextOptions<TimetableContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\mssqllocaldb;Initial Catalog=SchoolTimetable;Integrated Security=True;TrustServerCertificate=True;");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<enUser> enUsers
        {
            get;
            set;
        }

        public virtual DbSet<enClass> enClasses
        {
            get;
            set;
        }

        public virtual DbSet<enSubject> enSubjects
        {
            get;
            set;
        }

        public virtual DbSet<enLoggedLesson> enLoggedLessons
        {
            get;
            set;
        }

        public virtual DbSet<enSchoolYear> enSchoolYears
        {
            get;
            set;
        }

        public virtual DbSet<enEvent> enEvents
        {
            get;
            set;
        }

        public virtual DbSet<enTimetableLesson> enTimetableLessons
        {
            get;
            set;
        }

        public virtual DbSet<enLessonSchedule> enLessonSchedules
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.enUserMapping(modelBuilder);
            this.CustomizeenUserMapping(modelBuilder);

            this.enClassMapping(modelBuilder);
            this.CustomizeenClassMapping(modelBuilder);

            this.enSubjectMapping(modelBuilder);
            this.CustomizeenSubjectMapping(modelBuilder);

            this.enLoggedLessonMapping(modelBuilder);
            this.CustomizeenLoggedLessonMapping(modelBuilder);

            this.enSchoolYearMapping(modelBuilder);
            this.CustomizeenSchoolYearMapping(modelBuilder);

            this.enEventMapping(modelBuilder);
            this.CustomizeenEventMapping(modelBuilder);

            this.enTimetableLessonMapping(modelBuilder);
            this.CustomizeenTimetableLessonMapping(modelBuilder);

            this.enLessonScheduleMapping(modelBuilder);
            this.CustomizeenLessonScheduleMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region enUser Mapping

        private void enUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enUser>().ToTable(@"Users");
            modelBuilder.Entity<enUser>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enUser>().Property(x => x.Username).HasColumnName(@"Username").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<enUser>().Property(x => x.EduId).HasColumnName(@"EduId").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<enUser>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<enUser>().Property(x => x.Admin).HasColumnName(@"Admin").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enUser>().Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<enUser>().HasKey(@"Id");
            modelBuilder.Entity<enUser>().HasIndex(@"Username").IsUnique(true);
        }

        partial void CustomizeenUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region enClass Mapping

        private void enClassMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enClass>().ToTable(@"Classes");
            modelBuilder.Entity<enClass>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enClass>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<enClass>().HasKey(@"Id");
        }

        partial void CustomizeenClassMapping(ModelBuilder modelBuilder);

        #endregion

        #region enSubject Mapping

        private void enSubjectMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enSubject>().ToTable(@"Subjects");
            modelBuilder.Entity<enSubject>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enSubject>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<enSubject>().HasKey(@"Id");
        }

        partial void CustomizeenSubjectMapping(ModelBuilder modelBuilder);

        #endregion

        #region enLoggedLesson Mapping

        private void enLoggedLessonMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enLoggedLesson>().ToTable(@"LoggedLessons");
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.SchoolYearId).HasColumnName(@"SchoolYearId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.Date).HasColumnName(@"Date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.LessonNum).HasColumnName(@"LessonNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.ClassId).HasColumnName(@"ClassId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.SubjectId).HasColumnName(@"SubjectId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.TeacherId).HasColumnName(@"TeacherId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLoggedLesson>().Property(x => x.Topic).HasColumnName(@"Topic").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<enLoggedLesson>().HasKey(@"Id");
        }

        partial void CustomizeenLoggedLessonMapping(ModelBuilder modelBuilder);

        #endregion

        #region enSchoolYear Mapping

        private void enSchoolYearMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enSchoolYear>().ToTable(@"SchoolYears");
            modelBuilder.Entity<enSchoolYear>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enSchoolYear>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<enSchoolYear>().Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enSchoolYear>().Property(x => x.EndDate).HasColumnName(@"EndDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enSchoolYear>().Property(x => x.Active).HasColumnName(@"Active").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enSchoolYear>().HasKey(@"Id");
        }

        partial void CustomizeenSchoolYearMapping(ModelBuilder modelBuilder);

        #endregion

        #region enEvent Mapping

        private void enEventMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enEvent>().ToTable(@"Events");
            modelBuilder.Entity<enEvent>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enEvent>().Property(x => x.Time).HasColumnName(@"Time").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enEvent>().Property(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<enEvent>().Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enEvent>().Property(x => x.Description).HasColumnName(@"Description").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<enEvent>().HasKey(@"Id");
        }

        partial void CustomizeenEventMapping(ModelBuilder modelBuilder);

        #endregion

        #region enTimetableLesson Mapping

        private void enTimetableLessonMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enTimetableLesson>().ToTable(@"TimetableLessons");
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.SchoolYearId).HasColumnName(@"SchoolYearId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.EndDate).HasColumnName(@"EndDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.DayNum).HasColumnName(@"DayNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.LessonNum).HasColumnName(@"LessonNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.ClassId).HasColumnName(@"ClassId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.SubjectId).HasColumnName(@"SubjectId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().Property(x => x.TeacherId).HasColumnName(@"TeacherId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enTimetableLesson>().HasKey(@"Id");
        }

        partial void CustomizeenTimetableLessonMapping(ModelBuilder modelBuilder);

        #endregion

        #region enLessonSchedule Mapping

        private void enLessonScheduleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enLessonSchedule>().ToTable(@"LessonSchedules");
            modelBuilder.Entity<enLessonSchedule>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<enLessonSchedule>().Property(x => x.LessonNum).HasColumnName(@"LessonNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLessonSchedule>().Property(x => x.StartTime).HasColumnName(@"StartTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLessonSchedule>().Property(x => x.EndTime).HasColumnName(@"EndTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<enLessonSchedule>().HasKey(@"Id");
            modelBuilder.Entity<enLessonSchedule>().HasIndex(@"LessonNum").IsUnique(true);
        }

        partial void CustomizeenLessonScheduleMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<enUser>().HasMany(x => x.enLoggedLessons).WithOne(op => op.enUser).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<enUser>().HasMany(x => x.enTimetableLessons).WithOne(op => op.enUser).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<enUser>().HasMany(x => x.enEvents).WithOne(op => op.enUser).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<enClass>().HasMany(x => x.enLoggedLessons).WithOne(op => op.enClass).HasForeignKey(@"ClassId").IsRequired(true);
            modelBuilder.Entity<enClass>().HasMany(x => x.enTimetableLessons).WithOne(op => op.enClass).HasForeignKey(@"ClassId").IsRequired(true);

            modelBuilder.Entity<enSubject>().HasMany(x => x.enLoggedLessons).WithOne(op => op.enSubject).HasForeignKey(@"SubjectId").IsRequired(true);
            modelBuilder.Entity<enSubject>().HasMany(x => x.enTimetableLessons).WithOne(op => op.enSubject).HasForeignKey(@"SubjectId").IsRequired(true);

            modelBuilder.Entity<enLoggedLesson>().HasOne(x => x.enSubject).WithMany(op => op.enLoggedLessons).HasForeignKey(@"SubjectId").IsRequired(true);
            modelBuilder.Entity<enLoggedLesson>().HasOne(x => x.enUser).WithMany(op => op.enLoggedLessons).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<enLoggedLesson>().HasOne(x => x.enClass).WithMany(op => op.enLoggedLessons).HasForeignKey(@"ClassId").IsRequired(true);
            modelBuilder.Entity<enLoggedLesson>().HasOne(x => x.enSchoolYear).WithMany(op => op.enLoggedLessons).HasForeignKey(@"SchoolYearId").IsRequired(true);
            modelBuilder.Entity<enLoggedLesson>().HasOne(x => x.enLessonSchedule).WithMany(op => op.enLoggedLessons).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);

            modelBuilder.Entity<enSchoolYear>().HasMany(x => x.enLoggedLessons).WithOne(op => op.enSchoolYear).HasForeignKey(@"SchoolYearId").IsRequired(true);
            modelBuilder.Entity<enSchoolYear>().HasMany(x => x.enTimetableLessons).WithOne(op => op.enSchoolYear).HasForeignKey(@"SchoolYearId").IsRequired(true);

            modelBuilder.Entity<enEvent>().HasOne(x => x.enUser).WithMany(op => op.enEvents).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<enTimetableLesson>().HasOne(x => x.enClass).WithMany(op => op.enTimetableLessons).HasForeignKey(@"ClassId").IsRequired(true);
            modelBuilder.Entity<enTimetableLesson>().HasOne(x => x.enLessonSchedule).WithMany(op => op.enTimetableLessons).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);
            modelBuilder.Entity<enTimetableLesson>().HasOne(x => x.enUser).WithMany(op => op.enTimetableLessons).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<enTimetableLesson>().HasOne(x => x.enSchoolYear).WithMany(op => op.enTimetableLessons).HasForeignKey(@"SchoolYearId").IsRequired(true);
            modelBuilder.Entity<enTimetableLesson>().HasOne(x => x.enSubject).WithMany(op => op.enTimetableLessons).HasForeignKey(@"SubjectId").IsRequired(true);

            modelBuilder.Entity<enLessonSchedule>().HasMany(x => x.enLoggedLessons).WithOne(op => op.enLessonSchedule).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);
            modelBuilder.Entity<enLessonSchedule>().HasMany(x => x.enTimetableLessons).WithOne(op => op.enLessonSchedule).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
