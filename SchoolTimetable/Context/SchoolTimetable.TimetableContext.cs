//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 05. 03. 21:32:00
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Models;

namespace cnTimetable
{

    public partial class TimetableContext : DbContext
    {

        public TimetableContext() :
            base()
        {
            OnCreated();
        }

        public TimetableContext(DbContextOptions<TimetableContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\mssqllocaldb;Initial Catalog=SchoolTimetable;Integrated Security=True;TrustServerCertificate=True;");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Class> Classes
        {
            get;
            set;
        }

        public virtual DbSet<Subject> Subjects
        {
            get;
            set;
        }

        public virtual DbSet<LoggedLesson> LoggedLessons
        {
            get;
            set;
        }

        public virtual DbSet<SchoolYear> SchoolYears
        {
            get;
            set;
        }

        public virtual DbSet<Event> Events
        {
            get;
            set;
        }

        public virtual DbSet<TimetableLesson> TimetableLessons
        {
            get;
            set;
        }

        public virtual DbSet<BellSchedule> BellSchedules
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.ClassMapping(modelBuilder);
            this.CustomizeClassMapping(modelBuilder);

            this.SubjectMapping(modelBuilder);
            this.CustomizeSubjectMapping(modelBuilder);

            this.LoggedLessonMapping(modelBuilder);
            this.CustomizeLoggedLessonMapping(modelBuilder);

            this.SchoolYearMapping(modelBuilder);
            this.CustomizeSchoolYearMapping(modelBuilder);

            this.EventMapping(modelBuilder);
            this.CustomizeEventMapping(modelBuilder);

            this.TimetableLessonMapping(modelBuilder);
            this.CustomizeTimetableLessonMapping(modelBuilder);

            this.BellScheduleMapping(modelBuilder);
            this.CustomizeBellScheduleMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users");
            modelBuilder.Entity<User>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property(x => x.Username).HasColumnName(@"Username").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property(x => x.Admin).HasColumnName(@"Admin").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().HasKey(@"Id");
            modelBuilder.Entity<User>().HasIndex(@"Username").IsUnique(true);
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Class Mapping

        private void ClassMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Class>().ToTable(@"Classes");
            modelBuilder.Entity<Class>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Class>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Class>().HasKey(@"Id");
        }

        partial void CustomizeClassMapping(ModelBuilder modelBuilder);

        #endregion

        #region Subject Mapping

        private void SubjectMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Subject>().ToTable(@"Subjects");
            modelBuilder.Entity<Subject>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Subject>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Subject>().HasKey(@"Id");
        }

        partial void CustomizeSubjectMapping(ModelBuilder modelBuilder);

        #endregion

        #region LoggedLesson Mapping

        private void LoggedLessonMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LoggedLesson>().ToTable(@"LoggedLessons");
            modelBuilder.Entity<LoggedLesson>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.SchoolYearId).HasColumnName(@"SchoolYearId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.Date).HasColumnName(@"Date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.LessonNum).HasColumnName(@"LessonNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.ClassId).HasColumnName(@"ClassId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.SubjectId).HasColumnName(@"SubjectId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.TeacherId).HasColumnName(@"TeacherId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LoggedLesson>().Property(x => x.Topic).HasColumnName(@"Topic").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<LoggedLesson>().HasKey(@"Id");
        }

        partial void CustomizeLoggedLessonMapping(ModelBuilder modelBuilder);

        #endregion

        #region SchoolYear Mapping

        private void SchoolYearMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SchoolYear>().ToTable(@"SchoolYears");
            modelBuilder.Entity<SchoolYear>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<SchoolYear>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<SchoolYear>().Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<SchoolYear>().Property(x => x.EndDate).HasColumnName(@"EndDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<SchoolYear>().Property(x => x.Active).HasColumnName(@"Active").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<SchoolYear>().HasKey(@"Id");
        }

        partial void CustomizeSchoolYearMapping(ModelBuilder modelBuilder);

        #endregion

        #region Event Mapping

        private void EventMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Event>().ToTable(@"Events");
            modelBuilder.Entity<Event>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Event>().Property(x => x.Time).HasColumnName(@"Time").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Event>().Property(x => x.UserId).HasColumnName(@"UserId").ValueGeneratedNever();
            modelBuilder.Entity<Event>().Property(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Event>().Property(x => x.Param1).HasColumnName(@"Param1").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Event>().Property(x => x.Param2).HasColumnName(@"Param2").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Event>().HasKey(@"Id");
        }

        partial void CustomizeEventMapping(ModelBuilder modelBuilder);

        #endregion

        #region TimetableLesson Mapping

        private void TimetableLessonMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TimetableLesson>().ToTable(@"TimetableLessons");
            modelBuilder.Entity<TimetableLesson>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.SchoolYearId).HasColumnName(@"SchoolYearId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.EndDate).HasColumnName(@"EndDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.DayNum).HasColumnName(@"DayNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.LessonNum).HasColumnName(@"LessonNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.ClassId).HasColumnName(@"ClassId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.SubjectId).HasColumnName(@"SubjectId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().Property(x => x.TeacherId).HasColumnName(@"TeacherId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TimetableLesson>().HasKey(@"Id");
        }

        partial void CustomizeTimetableLessonMapping(ModelBuilder modelBuilder);

        #endregion

        #region BellSchedule Mapping

        private void BellScheduleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BellSchedule>().ToTable(@"BellSchedules");
            modelBuilder.Entity<BellSchedule>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BellSchedule>().Property(x => x.LessonNum).HasColumnName(@"LessonNum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BellSchedule>().Property(x => x.StartTime).HasColumnName(@"StartTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BellSchedule>().Property(x => x.EndTime).HasColumnName(@"EndTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BellSchedule>().HasKey(@"Id");
            modelBuilder.Entity<BellSchedule>().HasIndex(@"LessonNum").IsUnique(true);
        }

        partial void CustomizeBellScheduleMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().HasMany(x => x.LoggedLessons).WithOne(op => op.Teacher).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.TimetableLessons).WithOne(op => op.Teacher).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Events).WithOne(op => op.User).HasForeignKey(@"UserId").IsRequired(false);

            modelBuilder.Entity<Class>().HasMany(x => x.LoggedLessons).WithOne(op => op.Class).HasForeignKey(@"ClassId").IsRequired(true);
            modelBuilder.Entity<Class>().HasMany(x => x.TimetableLessons).WithOne(op => op.Class).HasForeignKey(@"ClassId").IsRequired(true);

            modelBuilder.Entity<Subject>().HasMany(x => x.LoggedLessons).WithOne(op => op.Subject).HasForeignKey(@"SubjectId").IsRequired(true);
            modelBuilder.Entity<Subject>().HasMany(x => x.TimetableLessons).WithOne(op => op.Subject).HasForeignKey(@"SubjectId").IsRequired(true);

            modelBuilder.Entity<LoggedLesson>().HasOne(x => x.Subject).WithMany(op => op.LoggedLessons).HasForeignKey(@"SubjectId").IsRequired(true);
            modelBuilder.Entity<LoggedLesson>().HasOne(x => x.Teacher).WithMany(op => op.LoggedLessons).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<LoggedLesson>().HasOne(x => x.Class).WithMany(op => op.LoggedLessons).HasForeignKey(@"ClassId").IsRequired(true);
            modelBuilder.Entity<LoggedLesson>().HasOne(x => x.SchoolYear).WithMany(op => op.LoggedLessons).HasForeignKey(@"SchoolYearId").IsRequired(true);
            modelBuilder.Entity<LoggedLesson>().HasOne(x => x.BellSchedule).WithMany(op => op.LoggedLessons).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);

            modelBuilder.Entity<SchoolYear>().HasMany(x => x.LoggedLessons).WithOne(op => op.SchoolYear).HasForeignKey(@"SchoolYearId").IsRequired(true);
            modelBuilder.Entity<SchoolYear>().HasMany(x => x.TimetableLessons).WithOne(op => op.SchoolYear).HasForeignKey(@"SchoolYearId").IsRequired(true);

            modelBuilder.Entity<Event>().HasOne(x => x.User).WithMany(op => op.Events).HasForeignKey(@"UserId").IsRequired(false);

            modelBuilder.Entity<TimetableLesson>().HasOne(x => x.Class).WithMany(op => op.TimetableLessons).HasForeignKey(@"ClassId").IsRequired(true);
            modelBuilder.Entity<TimetableLesson>().HasOne(x => x.BellSchedule).WithMany(op => op.TimetableLessons).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);
            modelBuilder.Entity<TimetableLesson>().HasOne(x => x.Teacher).WithMany(op => op.TimetableLessons).HasForeignKey(@"TeacherId").IsRequired(true);
            modelBuilder.Entity<TimetableLesson>().HasOne(x => x.SchoolYear).WithMany(op => op.TimetableLessons).HasForeignKey(@"SchoolYearId").IsRequired(true);
            modelBuilder.Entity<TimetableLesson>().HasOne(x => x.Subject).WithMany(op => op.TimetableLessons).HasForeignKey(@"SubjectId").IsRequired(true);

            modelBuilder.Entity<BellSchedule>().HasMany(x => x.LoggedLessons).WithOne(op => op.BellSchedule).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);
            modelBuilder.Entity<BellSchedule>().HasMany(x => x.TimetableLessons).WithOne(op => op.BellSchedule).HasPrincipalKey(@"LessonNum").HasForeignKey(@"LessonNum").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
